definitions:
  api.Message:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  api.Meta:
    properties:
      filtered_count:
        type: integer
      total_count:
        type: integer
    type: object
  api.SwgErrResponse:
    properties:
      error:
        type: string
      messages:
        items:
          $ref: '#/definitions/api.Message'
        type: array
    type: object
  api.SwgMsgResponse:
    properties:
      messages:
        items:
          $ref: '#/definitions/api.Message'
        type: array
    type: object
  api.SwgResponse-array_auditlogview_View:
    properties:
      data:
        items:
          $ref: '#/definitions/auditlogview.View'
        type: array
      messages:
        items:
          $ref: '#/definitions/api.Message'
        type: array
      meta:
        $ref: '#/definitions/api.Meta'
    type: object
  api.SwgResponse-array_bookview_BaseView:
    properties:
      data:
        items:
          $ref: '#/definitions/bookview.BaseView'
        type: array
      messages:
        items:
          $ref: '#/definitions/api.Message'
        type: array
      meta:
        $ref: '#/definitions/api.Meta'
    type: object
  api.SwgResponse-array_fineview_View:
    properties:
      data:
        items:
          $ref: '#/definitions/fineview.View'
        type: array
      messages:
        items:
          $ref: '#/definitions/api.Message'
        type: array
      meta:
        $ref: '#/definitions/api.Meta'
    type: object
  api.SwgResponse-array_userview_SimpleView:
    properties:
      data:
        items:
          $ref: '#/definitions/userview.SimpleView'
        type: array
      messages:
        items:
          $ref: '#/definitions/api.Message'
        type: array
      meta:
        $ref: '#/definitions/api.Meta'
    type: object
  api.SwgResponse-array_userview_View:
    properties:
      data:
        items:
          $ref: '#/definitions/userview.View'
        type: array
      messages:
        items:
          $ref: '#/definitions/api.Message'
        type: array
      meta:
        $ref: '#/definitions/api.Meta'
    type: object
  api.SwgResponse-bookview_BaseView:
    properties:
      data:
        $ref: '#/definitions/bookview.BaseView'
      messages:
        items:
          $ref: '#/definitions/api.Message'
        type: array
      meta:
        $ref: '#/definitions/api.Meta'
    type: object
  api.SwgResponse-bookview_DetailedView:
    properties:
      data:
        $ref: '#/definitions/bookview.DetailedView'
      messages:
        items:
          $ref: '#/definitions/api.Message'
        type: array
      meta:
        $ref: '#/definitions/api.Meta'
    type: object
  api.SwgResponse-fineview_View:
    properties:
      data:
        $ref: '#/definitions/fineview.View'
      messages:
        items:
          $ref: '#/definitions/api.Message'
        type: array
      meta:
        $ref: '#/definitions/api.Meta'
    type: object
  api.SwgResponse-loanview_DetailedView:
    properties:
      data:
        $ref: '#/definitions/loanview.DetailedView'
      messages:
        items:
          $ref: '#/definitions/api.Message'
        type: array
      meta:
        $ref: '#/definitions/api.Meta'
    type: object
  api.SwgResponse-reservationview_DetailedView:
    properties:
      data:
        $ref: '#/definitions/reservationview.DetailedView'
      messages:
        items:
          $ref: '#/definitions/api.Message'
        type: array
      meta:
        $ref: '#/definitions/api.Meta'
    type: object
  api.SwgResponse-userview_CurrentUserView:
    properties:
      data:
        $ref: '#/definitions/userview.CurrentUserView'
      messages:
        items:
          $ref: '#/definitions/api.Message'
        type: array
      meta:
        $ref: '#/definitions/api.Meta'
    type: object
  api.SwgResponse-userview_View:
    properties:
      data:
        $ref: '#/definitions/userview.View'
      messages:
        items:
          $ref: '#/definitions/api.Message'
        type: array
      meta:
        $ref: '#/definitions/api.Meta'
    type: object
  auditlogparams.BaseParams:
    properties:
      action:
        type: string
    type: object
  auditlogview.View:
    properties:
      action:
        type: string
      id:
        type: integer
      user_id:
        type: integer
    type: object
  bookparams.CreateParams:
    properties:
      author:
        type: string
      genre:
        type: string
      isbn:
        type: string
      language:
        type: string
      publication_date:
        type: string
      publisher:
        type: string
      title:
        type: string
    type: object
  bookparams.UpdateParams:
    properties:
      author:
        type: string
      genre:
        type: string
      id:
        type: integer
      isbn:
        type: string
      language:
        type: string
      publication_date:
        type: string
      publisher:
        type: string
      title:
        type: string
    type: object
  bookview.BaseView:
    properties:
      author:
        type: string
      genre:
        type: string
      id:
        type: integer
      isbn:
        type: string
      language:
        type: string
      publication_date:
        type: string
      publisher:
        type: string
      title:
        type: string
    type: object
  bookview.DetailedView:
    properties:
      author:
        type: string
      genre:
        type: string
      id:
        type: integer
      isbn:
        type: string
      language:
        type: string
      loans:
        items:
          $ref: '#/definitions/loanview.BaseView'
        type: array
      publication_date:
        type: string
      publisher:
        type: string
      reservations:
        items:
          $ref: '#/definitions/reservationview.BaseView'
        type: array
      title:
        type: string
    type: object
  fineview.View:
    properties:
      amount:
        type: number
      id:
        type: integer
      loan_id:
        type: integer
      status:
        type: string
      user_id:
        type: integer
    type: object
  loanhistoryview.View:
    properties:
      action:
        type: string
      id:
        type: integer
      loan_id:
        type: integer
    type: object
  loanview.BaseView:
    properties:
      book_id:
        type: integer
      borrow_date:
        type: string
      due_date:
        type: string
      fines:
        items:
          $ref: '#/definitions/fineview.View'
        type: array
      id:
        type: integer
      loan_histories:
        items:
          $ref: '#/definitions/loanhistoryview.View'
        type: array
      return_date:
        type: string
      status:
        type: string
      user_id:
        type: integer
    type: object
  loanview.BookView:
    properties:
      author:
        type: string
      genre:
        type: string
      id:
        type: integer
      isbn:
        type: string
      language:
        type: string
      publication_date:
        type: string
      publisher:
        type: string
      title:
        type: string
    type: object
  loanview.DetailedView:
    properties:
      book:
        $ref: '#/definitions/loanview.BookView'
      book_id:
        type: integer
      borrow_date:
        type: string
      due_date:
        type: string
      fines:
        items:
          $ref: '#/definitions/fineview.View'
        type: array
      id:
        type: integer
      loan_histories:
        items:
          $ref: '#/definitions/loanhistoryview.View'
        type: array
      return_date:
        type: string
      status:
        type: string
      user:
        $ref: '#/definitions/userview.View'
      user_id:
        type: integer
    type: object
  peopleparams.CreateParams:
    properties:
      full_name:
        type: string
      preferred_name:
        type: string
    type: object
  peopleparams.UpdateParams:
    properties:
      full_name:
        type: string
      id:
        type: integer
      language_preference:
        type: string
      preferred_name:
        type: string
    type: object
  personview.View:
    properties:
      full_name:
        type: string
      id:
        type: integer
      language_preference:
        type: string
      preferred_name:
        type: string
    type: object
  reservationview.BaseView:
    properties:
      book_id:
        type: integer
      id:
        type: integer
      reservation_date:
        type: string
      status:
        type: string
      user_id:
        type: integer
    type: object
  reservationview.BookView:
    properties:
      author:
        type: string
      genre:
        type: string
      id:
        type: integer
      isbn:
        type: string
      language:
        type: string
      publication_date:
        type: string
      publisher:
        type: string
      title:
        type: string
    type: object
  reservationview.DetailedView:
    properties:
      book:
        $ref: '#/definitions/reservationview.BookView'
      book_id:
        type: integer
      id:
        type: integer
      reservation_date:
        type: string
      status:
        type: string
      user:
        $ref: '#/definitions/userview.View'
      user_id:
        type: integer
    type: object
  userparams.CreateParams:
    properties:
      email:
        type: string
      password:
        type: string
      person_attributes:
        $ref: '#/definitions/peopleparams.CreateParams'
      username:
        type: string
    type: object
  userparams.SignInParams:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  userparams.UpdateParams:
    properties:
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      person_attributes:
        $ref: '#/definitions/peopleparams.UpdateParams'
      username:
        type: string
    type: object
  userparams.UpdateRoleParams:
    properties:
      role_id:
        type: integer
    type: object
  userview.CurrentUserView:
    properties:
      is_logged_in:
        type: boolean
      user:
        $ref: '#/definitions/userview.View'
    type: object
  userview.SimpleView:
    properties:
      id:
        type: integer
      username:
        type: string
    type: object
  userview.View:
    properties:
      abilities:
        items:
          type: string
        type: array
      email:
        type: string
      id:
        type: integer
      person_attributes:
        $ref: '#/definitions/personview.View'
      username:
        type: string
    type: object
info:
  contact: {}
  title: Library Mangement System API
paths:
  /api/v1//loan/{loan_id}/:
    get:
      consumes:
      - '*/*'
      description: Retrieves a loan from the library
      parameters:
      - description: loan ID to read
        in: path
        name: loan_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SwgResponse-loanview_DetailedView'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.SwgErrResponse'
      summary: Read a loan
      tags:
      - loan
  /api/v1/audit_log:
    get:
      consumes:
      - application/json
      description: List relevant audit logs
      parameters:
      - description: Offset for pagination
        in: query
        name: offset
        type: integer
      - description: Limit for pagination
        in: query
        name: limit
        type: integer
      - description: Filter by action
        in: query
        name: filter[action]
        type: string
      - description: Sort by column name
        in: query
        name: sortBy
        type: string
      - description: Order by direction (asc or desc)
        in: query
        name: orderBy
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SwgResponse-array_auditlogview_View'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.SwgErrResponse'
      summary: List audit logs
      tags:
      - audit log
  /api/v1/audit_log/:
    post:
      consumes:
      - application/json
      description: list relevang audit logs
      parameters:
      - description: Audit log creation request
        in: body
        name: audit_log
        required: true
        schema:
          $ref: '#/definitions/auditlogparams.BaseParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SwgMsgResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.SwgErrResponse'
      summary: list audit logs
      tags:
      - audit log
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: signs in a user and creates a session
      parameters:
      - description: User creation request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/userparams.SignInParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SwgResponse-userview_View'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.SwgErrResponse'
      summary: sign in a user
      tags:
      - auth
  /api/v1/auth/logout:
    get:
      consumes:
      - application/json
      description: signs out the user and revoke their session
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SwgMsgResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.SwgErrResponse'
      summary: SignOut
      tags:
      - auth
  /api/v1/book:
    get:
      consumes:
      - application/json
      description: Lists books in the library
      parameters:
      - description: Offset for pagination
        in: query
        name: offset
        type: integer
      - description: Limit for pagination
        in: query
        name: limit
        type: integer
      - description: Filter by value
        in: query
        name: filter[value]
        type: string
      - description: Sort by column name (e.g. title)
        in: query
        name: sortBy
        type: string
      - description: Order by direction (asc or desc)
        in: query
        name: orderBy
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SwgResponse-array_bookview_BaseView'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.SwgErrResponse'
      summary: List books
      tags:
      - book
  /api/v1/book/:
    post:
      consumes:
      - application/json
      description: creates a new book in the library
      parameters:
      - description: Book creation request
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/bookparams.CreateParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SwgResponse-bookview_BaseView'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.SwgErrResponse'
      summary: Create a book
      tags:
      - book
  /api/v1/book/{book_id}:
    delete:
      consumes:
      - '*/*'
      description: deletes a book from the library
      parameters:
      - description: Book ID to delete
        in: path
        name: book_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SwgResponse-bookview_BaseView'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.SwgErrResponse'
      summary: Delete a book
      tags:
      - book
    get:
      consumes:
      - '*/*'
      description: reads a book in the library
      parameters:
      - description: Book ID to read
        in: path
        name: book_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SwgResponse-bookview_DetailedView'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.SwgErrResponse'
      summary: Read book
      tags:
      - book
    patch:
      consumes:
      - application/json
      description: Updates an existing book in the library
      parameters:
      - description: Book ID to update
        in: path
        name: book_id
        required: true
        type: integer
      - description: Book update request
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/bookparams.UpdateParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SwgResponse-bookview_BaseView'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.SwgErrResponse'
      summary: Update a book
      tags:
      - book
  /api/v1/book/{book_id}/loan/:
    post:
      consumes:
      - '*/*'
      description: Loans a book from the library
      parameters:
      - description: Book ID for loan
        in: path
        name: book_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SwgResponse-loanview_DetailedView'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.SwgErrResponse'
      summary: Loan a book
      tags:
      - loan
  /api/v1/book/{book_id}/reservation/:
    post:
      consumes:
      - '*/*'
      description: Creates a reservation for a book
      parameters:
      - description: Book ID for reservation
        in: path
        name: book_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SwgResponse-reservationview_DetailedView'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.SwgErrResponse'
      summary: Create a reservation
      tags:
      - reservation
  /api/v1/book/autocomplete:
    get:
      consumes:
      - '*/*'
      description: Autocomplete 10 books based on input value
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SwgResponse-array_userview_SimpleView'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.SwgErrResponse'
      summary: Autocomplete 10 books based on input value
      tags:
      - user
  /api/v1/current:
    get:
      consumes:
      - '*/*'
      description: Retrieves the current user if logged in
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SwgResponse-userview_CurrentUserView'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.SwgErrResponse'
      summary: Retrieve current user
      tags:
      - user
  /api/v1/fine:
    get:
      consumes:
      - application/json
      description: List fines belonging to a loan
      parameters:
      - description: Offset for pagination
        in: query
        name: offset
        type: integer
      - description: Limit for pagination
        in: query
        name: limit
        type: integer
      - description: Filter by user ID
        in: query
        name: filter[user_id]
        type: integer
      - description: Sort by column name
        in: query
        name: sortBy
        type: string
      - description: Order by direction (asc or desc)
        in: query
        name: orderBy
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SwgResponse-array_fineview_View'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.SwgErrResponse'
      summary: List fines
      tags:
      - fine
  /api/v1/fine/{fine_id}:
    delete:
      consumes:
      - '*/*'
      description: deletes a fine belonging to a loan
      parameters:
      - description: fine ID to delete
        in: path
        name: fine_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SwgResponse-fineview_View'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.SwgErrResponse'
      summary: Delete fine
      tags:
      - fine
  /api/v1/fine/{fine_id}/settle:
    patch:
      consumes:
      - '*/*'
      description: settles a fine belonging to a loan
      parameters:
      - description: fine ID to settle
        in: path
        name: fine_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SwgResponse-fineview_View'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.SwgErrResponse'
      summary: Settle fine
      tags:
      - fine
  /api/v1/health:
    get:
      consumes:
      - '*/*'
      description: get the status of server.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SwgMsgResponse'
      summary: Show the status of server.
      tags:
      - health
  /api/v1/loan/:
    post:
      consumes:
      - '*/*'
      description: Admin loans a book on behalf of a user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SwgResponse-loanview_DetailedView'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.SwgErrResponse'
      summary: Admin loans a book on behalf of a user
      tags:
      - loan
  /api/v1/loan/{loan_id}/:
    delete:
      consumes:
      - '*/*'
      description: Deletes an existing loan in the library
      parameters:
      - description: loan ID to delete
        in: path
        name: loan_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SwgResponse-loanview_DetailedView'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.SwgErrResponse'
      summary: Delete a loan
      tags:
      - loan
  /api/v1/loan/{loan_id}/renew:
    patch:
      consumes:
      - '*/*'
      description: Renews a loan from the library
      parameters:
      - description: loan ID to renew
        in: path
        name: loan_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SwgResponse-loanview_DetailedView'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.SwgErrResponse'
      summary: Renew a loan
      tags:
      - loan
  /api/v1/loan/{loan_id}/return:
    patch:
      consumes:
      - '*/*'
      description: Returns a book to the library
      parameters:
      - description: loan ID to return
        in: path
        name: loan_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SwgResponse-loanview_DetailedView'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.SwgErrResponse'
      summary: Return a book
      tags:
      - loan
  /api/v1/loan/book:
    get:
      consumes:
      - '*/*'
      description: Lists books on loan by current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SwgResponse-loanview_DetailedView'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.SwgErrResponse'
      summary: List books on loan by current user
      tags:
      - loan
  /api/v1/reservation/:
    post:
      consumes:
      - '*/*'
      description: Admin reservations a book on behalf of a user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SwgResponse-reservationview_DetailedView'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.SwgErrResponse'
      summary: Admin reservations a book on behalf of a user
      tags:
      - loan
  /api/v1/reservation/{reservation_id}/:
    delete:
      consumes:
      - '*/*'
      description: Deletes a reservation for a book
      parameters:
      - description: Book ID for reservation
        in: path
        name: book_id
        required: true
        type: integer
      - description: reservation ID to delete
        in: path
        name: reservation_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SwgResponse-reservationview_DetailedView'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.SwgErrResponse'
      summary: Delete a reservation
      tags:
      - reservation
    get:
      consumes:
      - '*/*'
      description: Reads a reservation for a book
      parameters:
      - description: reservation ID to read
        in: path
        name: reservation_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SwgResponse-reservationview_DetailedView'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.SwgErrResponse'
      summary: Read a reservation
      tags:
      - reservation
  /api/v1/reservation/{reservation_id}/cancel:
    patch:
      consumes:
      - '*/*'
      description: Cancels a reservation for a book
      parameters:
      - description: reservation ID to cancel
        in: path
        name: reservation_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SwgResponse-reservationview_DetailedView'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.SwgErrResponse'
      summary: Cancel a reservation
      tags:
      - reservation
  /api/v1/reservation/{reservation_id}/checkout:
    patch:
      consumes:
      - '*/*'
      description: Checks out a book for a given reservation
      parameters:
      - description: reservation ID to checkout
        in: path
        name: reservation_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SwgResponse-reservationview_DetailedView'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.SwgErrResponse'
      summary: Checkout a book
      tags:
      - reservation
  /api/v1/reservation/book:
    get:
      consumes:
      - '*/*'
      description: Lists books on reservation
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SwgResponse-reservationview_DetailedView'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.SwgErrResponse'
      summary: List books on reservation
      tags:
      - loan
  /api/v1/user:
    get:
      consumes:
      - '*/*'
      description: List users depending on the collection query
      parameters:
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      - default: 25
        description: Limit for pagination
        in: query
        name: limit
        type: integer
      - default: 1
        description: Filter by user ID
        in: query
        name: filter[user_id]
        type: integer
      - default: '"created_at"'
        description: Sort by column name
        in: query
        name: sortBy
        type: string
      - default: '"desc"'
        description: Order by asc or desc
        in: query
        name: orderBy
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SwgResponse-array_userview_View'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.SwgErrResponse'
      summary: List users
      tags:
      - user
  /api/v1/user/:
    post:
      consumes:
      - application/json
      description: Creates a new user in the system
      parameters:
      - description: User creation request
        in: body
        name: createuserparam
        required: true
        schema:
          $ref: '#/definitions/userparams.CreateParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SwgResponse-userview_View'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.SwgErrResponse'
      summary: Create a new user
      tags:
      - auth
  /api/v1/user/{user_id}:
    delete:
      consumes:
      - '*/*'
      description: Deletes an existing user in the system
      parameters:
      - description: User ID to delete
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SwgResponse-userview_View'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.SwgErrResponse'
      summary: Delete an existing user
      tags:
      - user
    get:
      consumes:
      - '*/*'
      description: Retrieves an existing user from the system
      parameters:
      - description: User ID to retrieve
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SwgResponse-userview_View'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.SwgErrResponse'
      summary: Read an existing user
      tags:
      - user
    patch:
      consumes:
      - application/json
      description: Updates an existing user in the system. This only includes username,
        first name, last name, preferred name, language
      parameters:
      - description: User ID to update
        in: path
        name: user_id
        required: true
        type: integer
      - description: User update request
        in: body
        name: createuserparam
        required: true
        schema:
          $ref: '#/definitions/userparams.UpdateParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SwgResponse-userview_View'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.SwgErrResponse'
      summary: Update an existing user
      tags:
      - user
  /api/v1/user/{user_id}/role:
    patch:
      consumes:
      - application/json
      description: Update user role of a user
      parameters:
      - description: User ID to update role
        in: path
        name: user_id
        required: true
        type: integer
      - description: User update role request
        in: body
        name: updateroleparam
        required: true
        schema:
          $ref: '#/definitions/userparams.UpdateRoleParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SwgResponse-userview_View'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.SwgErrResponse'
      summary: Update user role
      tags:
      - user
  /api/v1/user/autocomplete:
    get:
      consumes:
      - '*/*'
      description: Autocomplete 10 users based on input value
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SwgResponse-array_userview_SimpleView'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.SwgErrResponse'
      summary: Autocomplete 10 users based on input value
      tags:
      - user
swagger: "2.0"
